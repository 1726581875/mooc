
一、处理问题：
微服务互相调用、mq的使用、定时任务等等会使得日志日志输出非常混乱，特别是一个功能可能调用多个微服务，如果出现问题，在大量日志下将很难定位本次请求的整个链路。

二、处理方法：
利用日志的MDC机制和elastic-apm-agent-1.27.0.jar包，日志里新增traceId来标识整个链路的调用。

三、优点
无入侵实现接口逻辑链路追踪，方便开发能精准定位问题

四、跟踪范围
链路traceId跟踪范围（不同服务不同线程traceId是否可以保持传递）
经过验证，以下场景可以追踪：
1、当前线程 2、使用@Async注解的异步 3、feign跨服务调用 4、mq发送和消费(待测试)

以下情况traceId没有传递：
1、自己new线程的异步new Thread(() -> {to do something}).start()不支持传递;
2、spring定时任务@Scheduled注解
3、定时任务里通过feign调用其他服务（定时任务里通过手动MDC.put("trace.id", UUID.randomUUID().toString())设置traceId
，调用其他服务，链路会断开，另外一个服务是新生成了不同的traceId)

五、集成方法
1、logback日志配置pattern加上以上配置
traceId:[%X{trace.id}]

2、返回结果统一RespResult返回traceId字段
traceId 通过 MDC.get("trace.id") 获取

3、下载elastic-apm-agent-1.27.0.jar包

4、启动配置加上
-javaagent:D:\data\apm\elastic-apm-agent-1.27.0.jar
-Delastic.apm.service_name=mooc-core
-Delastic.apm.enable_log_correlation=true
-Delastic.apm.disable_send=true

配置说明：
-Delastic.apm.enable_log_correlation=true #开启MDC的trace.id
-Delastic.apm.disable_send=true #elastic.apm不收集数据


问题：
运行时发现日志里出现这样的ERROR信息
main ERROR No Log4j 2 configuration file found. Using default configuration (logging only errors to the console), or user programmatically provided configurations. Set system property 'log4j2.debug' to show Log4j 2 internal initialization logging.
猜测原因是使用了elastic-apm-agent-1.27.0.jar包里面使用了log4j2的依赖，而我们resources目录下没有log4j2.xml文件
目前解决办法是：
在resources目录下新增log4j2.xml文件，文件内容详情请见mooc-core工程resources目录